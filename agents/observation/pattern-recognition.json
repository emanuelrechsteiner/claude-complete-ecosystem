{
  "patternRecognitionEngine": {
    "version": "1.0.0",
    "analysisModules": {
      "toolEfficiency": {
        "description": "Analyze tool usage patterns for optimization opportunities",
        "metrics": [
          "tool_invocation_frequency",
          "tool_success_rate",
          "tool_execution_time",
          "tool_error_patterns"
        ],
        "thresholds": {
          "lowUsageThreshold": 0.1,
          "inefficiencyThreshold": 0.7,
          "errorRateThreshold": 0.2
        },
        "detectionRules": [
          {
            "id": "TOOL-001",
            "name": "Underutilized Tool Detection",
            "condition": "tool_usage < available_tools * 0.3",
            "recommendation": "Review tool permissions and training"
          },
          {
            "id": "TOOL-002", 
            "name": "Inefficient Tool Usage",
            "condition": "manual_workaround_count > 5 for same task type",
            "recommendation": "Add missing tool to agent permissions"
          },
          {
            "id": "TOOL-003",
            "name": "Tool Error Pattern",
            "condition": "tool_error_rate > 0.2 for specific tool",
            "recommendation": "Tool usage training or alternative tool"
          }
        ]
      },
      "workflowOptimization": {
        "description": "Identify workflow bottlenecks and inefficiencies",
        "metrics": [
          "task_completion_time",
          "dependency_wait_time",
          "rework_frequency",
          "parallel_opportunity_score"
        ],
        "thresholds": {
          "bottleneckThreshold": 0.25,
          "reworkThreshold": 0.15,
          "parallelOpportunityThreshold": 0.6
        },
        "detectionRules": [
          {
            "id": "FLOW-001",
            "name": "Sequential Bottleneck",
            "condition": "dependency_wait_time > total_time * 0.25",
            "recommendation": "Restructure dependencies for parallel execution"
          },
          {
            "id": "FLOW-002",
            "name": "High Rework Rate",
            "condition": "task_rework_count > 2",
            "recommendation": "Improve initial task specifications or quality gates"
          },
          {
            "id": "FLOW-003",
            "name": "Missed Parallelization",
            "condition": "independent_tasks_sequential > 3",
            "recommendation": "Update planning templates for parallel execution"
          }
        ]
      },
      "communicationEfficiency": {
        "description": "Analyze inter-agent communication patterns",
        "metrics": [
          "message_clarity_score",
          "response_time",
          "escalation_frequency",
          "handoff_success_rate"
        ],
        "thresholds": {
          "clarificationThreshold": 0.2,
          "responseDelayThreshold": 3600,
          "escalationThreshold": 0.3
        },
        "detectionRules": [
          {
            "id": "COMM-001",
            "name": "Communication Clarity Issue",
            "condition": "clarification_requests > total_messages * 0.2",
            "recommendation": "Standardize communication templates"
          },
          {
            "id": "COMM-002",
            "name": "Slow Response Pattern",
            "condition": "average_response_time > 1 hour",
            "recommendation": "Implement priority notification system"
          },
          {
            "id": "COMM-003",
            "name": "Excessive Escalations",
            "condition": "escalation_rate > 0.3",
            "recommendation": "Improve agent decision authority or training"
          }
        ]
      },
      "qualityAssurance": {
        "description": "Track quality metrics and improvement opportunities",
        "metrics": [
          "first_pass_success_rate",
          "test_coverage",
          "documentation_completeness",
          "security_compliance_score"
        ],
        "thresholds": {
          "qualityThreshold": 0.9,
          "coverageThreshold": 0.9,
          "documentationThreshold": 0.85
        },
        "detectionRules": [
          {
            "id": "QUAL-001",
            "name": "Low First-Pass Success",
            "condition": "first_pass_success < 0.8",
            "recommendation": "Enhance validation and testing protocols"
          },
          {
            "id": "QUAL-002",
            "name": "Documentation Lag",
            "condition": "undocumented_features > 2",
            "recommendation": "Integrate documentation into workflow"
          },
          {
            "id": "QUAL-003",
            "name": "Test Coverage Gap",
            "condition": "test_coverage < 0.9 for critical components",
            "recommendation": "Mandatory test coverage before completion"
          }
        ]
      },
      "resourceUtilization": {
        "description": "Optimize agent workload and resource usage",
        "metrics": [
          "agent_utilization_rate",
          "task_distribution_balance",
          "idle_time_percentage",
          "context_switch_frequency"
        ],
        "thresholds": {
          "utilizationThreshold": 0.8,
          "balanceThreshold": 0.3,
          "idleThreshold": 0.2
        },
        "detectionRules": [
          {
            "id": "RES-001",
            "name": "Agent Overload",
            "condition": "agent_utilization > 0.9 sustained",
            "recommendation": "Redistribute tasks or adjust planning"
          },
          {
            "id": "RES-002",
            "name": "Unbalanced Workload",
            "condition": "workload_variance > 0.3 across agents",
            "recommendation": "Rebalance task assignments"
          },
          {
            "id": "RES-003",
            "name": "Excessive Context Switching",
            "condition": "context_switches > 10 per day",
            "recommendation": "Batch similar tasks together"
          }
        ]
      }
    },
    "aggregationRules": {
      "confidenceCalculation": "weighted_average",
      "prioritization": "impact * frequency * ease_of_implementation",
      "minimumDataPoints": 10,
      "statisticalSignificance": 0.95
    },
    "learningParameters": {
      "adaptiveThresholds": true,
      "historicalWeight": 0.3,
      "recentWeight": 0.7,
      "outlierDetection": "isolation_forest"
    }
  },
  "improvementGeneration": {
    "categories": {
      "tooling": {
        "types": ["add_tool", "remove_tool", "modify_permissions", "tool_training"],
        "impactRange": [0.1, 0.4],
        "implementationComplexity": "low"
      },
      "workflow": {
        "types": ["parallelize", "reorder", "consolidate", "automate"],
        "impactRange": [0.2, 0.6],
        "implementationComplexity": "medium"
      },
      "communication": {
        "types": ["protocol_update", "template_creation", "notification_rules", "escalation_paths"],
        "impactRange": [0.1, 0.3],
        "implementationComplexity": "low"
      },
      "quality": {
        "types": ["validation_rules", "testing_requirements", "review_gates", "automation"],
        "impactRange": [0.3, 0.5],
        "implementationComplexity": "medium"
      },
      "system": {
        "types": ["architecture_change", "integration_update", "performance_tuning"],
        "impactRange": [0.4, 0.8],
        "implementationComplexity": "high"
      }
    },
    "riskAssessment": {
      "factors": [
        "change_scope",
        "agent_dependencies",
        "rollback_complexity",
        "testing_requirements",
        "user_impact"
      ],
      "riskLevels": {
        "low": "Single agent, easy rollback",
        "medium": "Multiple agents, moderate testing",
        "high": "System-wide, complex dependencies"
      }
    },
    "successMetrics": {
      "efficiency": "time_saved / implementation_time",
      "quality": "error_reduction + quality_improvement",
      "satisfaction": "agent_effectiveness_score",
      "roi": "(benefit * probability) / cost"
    }
  }
}